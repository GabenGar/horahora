apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  labels:
    app: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
    spec:
      containers:
      - name: scheduler
#        command: ["/go/bin/dlv"]
#        args: ["--listen=:39001",  "--headless=true", "--api-version=2", "exec", "./scheduler"]
        image: 908221837281.dkr.ecr.us-west-1.amazonaws.com/scheduler:latest
        env:
          - name: pgs_host
            value: "scheduledb-dev.cwioxjkfbfkg.us-west-1.rds.amazonaws.com"
          - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
            value: warn
          - name: pgs_port
            value: "5432"
          - name: pgs_user
            value: "scheduler"
          - name: pgs_pass
            valueFrom:
              secretKeyRef:
                name: scheduledb
                key: password
          - name: SocksConn
            valueFrom:
              secretKeyRef:
                name: socks-conn
                key: socks-conn
          - name: pgs_db
            value: "scheduler"
          - name: GRPCPort
            value: "7777"
          - name: VideoServiceGRPCAddress
            value: "videoproxy:7777"
          - name: NumberOfRetries
            value: "2"
          - name: redis_host
            value: "videoredis-dev.c7ow2j.ng.0001.usw1.cache.amazonaws.com"
          - name: redis_port
            value: "6379"
          - name: redis_pass
            value: ""
          - name: SyncPollDelay
            value: "1m"
          - name: MaxDLFileSize
            value: "300"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: videoservice
  labels:
    app: videoservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: videoservice
  template:
    metadata:
      labels:
        app: videoservice
#      annotations:
#        'consul.hashicorp.com/connect-inject': 'true'
    spec:
      volumes:
        - name: shared-data
          emptyDir: {}
      containers:
        - name: videoservice
          image: 908221837281.dkr.ecr.us-west-1.amazonaws.com/videoservice:latest
#          command: ["/go/bin/dlv"]
#          args: ["--listen=:39002", "--headless=true", "--api-version=2", "exec", "./videoservice"]
          resources:
            limits:
              memory: 3044Mi
            requests:
              memory: 256Mi
          ports:
            - containerPort: 7777
          env:
            - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
              value: warn
            - name: pgs_host
              value: "videodb-dev.cwioxjkfbfkg.us-west-1.rds.amazonaws.com"
            - name: pgs_port
              value: "5432"
            - name: pgs_user
              value: "videoservice"
            - name: pgs_pass
              valueFrom:
                secretKeyRef:
                  name: videodb
                  key: password
            - name: pgs_db
              value: "videoservice"
            - name: GRPCPort
              value: "7777"
            - name: UserServiceGRPCAddress
              value: "userservice:7777"
            - name: BucketName
              value: "horahora-dev-otomads"
            - name: Local
              value: "false"
            - name: redis_host
              value: "videoredis-dev.c7ow2j.ng.0001.usw1.cache.amazonaws.com"
            - name: redis_port
              value: "6379"
            - name: redis_pass
              value: ""
            - name: OriginFQDN
              value: "https://horahora-dev-otomads.s3-us-west-1.amazonaws.com"
            - name: AWS_DEFAULT_REGION
              value: "us-west-1"
            - name: JaegerAddress
              value: "simplest-agent"
            - name: ApprovalThreshold
              value: "1"
            - name: StorageBackend
              value: "s3"
      serviceAccountName: videoservice
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: videoservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduledb
  labels:
    app: scheduledb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduledb
  template:
    metadata:
      labels:
        app: scheduledb
    spec:
      containers:
      - name: scheduledb
        image: postgres:12
        env:
        - name: POSTGRES_USER
          value: "guest"
        - name: POSTGRES_PASSWORD
          value: "guest"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userservice
  labels:
    app: userservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: userservice
  template:
    metadata:
      labels:
        app: userservice
    spec:
      containers:
      - name: userservice
        image: 908221837281.dkr.ecr.us-west-1.amazonaws.com/userservice:latest
#        command: ["/go/bin/dlv"]
#        args: ["--listen=:39003",  "--headless=true", "--api-version=2", "exec", "./userservice"]
        # "--continue", "--accept-multiclient", to avoid waiting for debugger
        ports:
          - containerPort: 7777
        env:
        - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
          value: warn
        - name: pgs_host
          value: "userdb-dev.cwioxjkfbfkg.us-west-1.rds.amazonaws.com"
        - name: pgs_port
          value: "5432"
        - name: pgs_user
          value: "userservice"
        - name: pgs_pass
          valueFrom:
            secretKeyRef:
              name: userdb
              key: password
        - name: pgs_db
          value: "userservice"
        - name: RSA_KEYPAIR
          value: |+
                  -----BEGIN RSA PRIVATE KEY-----
                  MIIEpgIBAAKCAQEA+MHfP6bK1Tm5Qsy49WSD9TIsdKvstfnshIIlc6Or7jr4Lz/c
                  ZqivsGtsuenlyyMg0uEFKGC2VXojdyysPwsPN1V+OZNKrUexuUKCJ25xCob8xncJ
                  3ml2zLRyEKTAWTyV9KlaviapphoKdO+kUzVM+mM+BqXv2C/gS4nGhH4xN/8GRlGM
                  3x/w9d/kMbk0yVo8WvNCObAj1PBzTTc6pvXHijS8HwR4Kf6cUgEjLbAjDZqTAFQH
                  kL3wTTUspRbyCqNBY3pahqsMJsur3TnHBzdYrKhXOIdW5HF2H0Vi0URX03mD1uo3
                  775yQMy/R90pX2pYDXO50HVmlaBSRaRwVq4PWwIDAQABAoIBAQDOnDAx7PXxLfWK
                  3wEMiIT1hcvYx+deqgthb7ttlda6ku4KSI9mENuDu2Xd8MB0/WNI467l/5XR3xVP
                  6aHS5vunaPHjHkxbKf4aMnxqBdgL91xB9yMSQSR0F7fZzQ0Z0TF3uaXt46zqkhx3
                  TYd9uPqLyRv+Z5qTRAiWlQN2jl2Q9DRn3HdTaGPF5rsn2CjFPmoQGX7A+objSBSq
                  3JrU4cv6huqCZODqyCgVjdHfaRUFLGCPs5phoO29LY2DElo6BhWaJl2tvIXy2eqN
                  yqNwYjHHfMmzBv+OWyOY9IuussRajx4JvlIdh0M8Fm5Tniqeip/LpG0GOvK8l+qd
                  n3q3GLrJAoGBAP8SkhpL5A0HIkFwsL56eye9Ofquj71AoWeIxs3A/GYssjGoDQnU
                  rG3GUBFNuTSo5ulPSe43vJ3naTZZBffQXI8bW+2+dIAoExApu/jqH+ETfERhRQMS
                  4N8u88jxYTdi3WCOjhGpRjnXm9Wtwgq91wsvAAh+fv6b03FH1EZKgEDHAoGBAPmp
                  bEYK8QWg4AKK6e/EQhZW9su4Sdb38U4wQTyTvlDN7Bc+ZYvXeOlyBxdHDiEWC+XL
                  wHtrOlqQ+U9nCfC4lrJbGbVmrQ4mSwVhLGPQz2zntvxw8jQwZx+K4OFs4JFqHhWc
                  khpz21VGxWsJ3Jix6GoDKtz03IomcDpr9lxUZFDNAoGBAKJnMYz6qu28kAv4cyAk
                  Hcu0iHjasfw+bUXdaS7R5CIt7Rr+s6aBuXN/Y7VQtk4YCEWeTSUWacpj77JBxjH9
                  gSFAuyxJKiX63gBZgiw+7SNCY8mp4OXPHEwduexD+7DnCqqSuVP3YhYr+DV5l2V9
                  b7DYMP43hCYaEus6X6aNgtE7AoGBAIg6GgpeDgW0MocwpVVfEXB/I0sl06SoxdKU
                  IgSb2UzeD+Te9ynG+QLoZVYeP2duUC+jbfPqHn0sfd0FrDbdgdzwOKbyz5rY6jaV
                  P1N3rLcP+JjmSEKR5rMfZHWcoyy1apUASfiFHzj41OADEYuACAFQmSLXuT7omnRG
                  VLcslVBBAoGBAMJgmuUGIXvS4cBDsgjrKH7mCssjBandLN2NPkNN6uhSnANxm7n8
                  g36Dcu4E9TEcC7qNSJ8eVeutOENerGTVJ8fUAbXhIdvjcLz0iSMkpROCNz+Zr35G
                  rd258VnoYyNVswrjem4jHKTm4frORBF3sx6R1i/KiFSptp941g2hYjGe
                  -----END RSA PRIVATE KEY-----
        - name: GRPCPort
          value: "7777"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontapi
  labels:
    app: frontapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontapi
  template:
    metadata:
      labels:
        app: frontapi
#      annotations:
#        'consul.hashicorp.com/connect-inject': 'true'
#        'consul.hashicorp.com/connect-service-upstreams': 'videoservice:7778'
    spec:
      containers:
        - name: frontapi
          image: 908221837281.dkr.ecr.us-west-1.amazonaws.com/frontend:latest
          #        command: ["/go/bin/dlv"]
          #        args: ["--listen=:39003",  "--headless=true", "--api-version=2", "exec", "./userservice"]
          # "--continue", "--accept-multiclient", to avoid waiting for debugger
          ports:
            - containerPort: 8083
          env:
            - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
              value: warn
            - name: UserServiceGRPCAddress
              value: "userservice:7777"
            - name: VideoServiceGRPCAddress
              value: "videoproxy:7777"
            - name: SchedulerServiceGRPCAddress
              value: "scheduler:7777"
            - name: JaegerAddress
              value: "simplest-agent"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-frontend
  labels:
    app: react-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-frontend
  template:
    metadata:
      labels:
        app: react-frontend
    #      annotations:
    #        'consul.hashicorp.com/connect-inject': 'true'
    #        'consul.hashicorp.com/connect-service-upstreams': 'videoservice:7778'
    spec:
      containers:
        - name: frontend
          image: 908221837281.dkr.ecr.us-west-1.amazonaws.com/react_frontend:latest
          #        command: ["/go/bin/dlv"]
          #        args: ["--listen=:39003",  "--headless=true", "--api-version=2", "exec", "./userservice"]
          # "--continue", "--accept-multiclient", to avoid waiting for debugger
          ports:
            - containerPort: 3000
          env:
      serviceAccountName: frontend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend
---
apiVersion: v1
kind: Pod
metadata:
  name: dnsutils
  namespace: default
spec:
  containers:
  - name: dnsutils
    image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
  restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: userservice
spec:
  selector:
    app: userservice
  ports:
    - protocol: TCP
      port: 7777
      targetPort: 7777
---
apiVersion: v1
kind: Service
metadata:
  name: videoproxy
spec:
  selector:
    app: videoservice
  ports:
    - protocol: TCP
      port: 7777
      targetPort: 7777
---
apiVersion: v1
kind: Service
metadata:
  name: scheduler
spec:
  selector:
    app: scheduler
  ports:
    - protocol: TCP
      port: 7777
      targetPort: 7777
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: LoadBalancer
  selector:
    app: react-frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  loadBalancerSourceRanges:
  - "217.138.0.0/16"
  - "0.0.0.0/0"
---
apiVersion: v1
kind: Service
metadata:
  name: frontapi
spec:
  selector:
    app: frontapi
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083

#apiVersion: v1
#kind: Service
#metadata:
#  name: frontend-svc
#spec:
#  type: NodePort
#  selector:
#    app: frontend
#  ports:
#    # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
#    - port: 8082
#      targetPort: 8082
#      # Optional field
#      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
#      nodePort: 30007

# https://aws.amazon.com/premiumsupport/knowledge-center/eks-cidr-ip-address-loadbalancer/
#---
#kind: Service
#apiVersion: v1
#metadata:
#  name: scheduledb
#spec:
#  ports:
#    - port: 5432
#      targetPort: 5432
#---
#kind: Endpoints
#apiVersion: v1
#metadata:
#  name: scheduledb
#subsets:
#  - addresses:
#      - ip: 35.188.8.12
#    ports:
#      - port: 5432
---
